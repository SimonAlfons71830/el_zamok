
el_zamok.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000005ac  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021b9  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dc2  00000000  00000000  000029c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bbc  00000000  00000000  00003783  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000378  00000000  00000000  00004340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007fc  00000000  00000000  000046b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dde  00000000  00000000  00004eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00005c92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "Headers_/DY50.h"
#include "Headers_/Zamok.h"


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	1f 92       	push	r1
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
	Zamok el_lock;
  a2:	ce 01       	movw	r24, r28
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN5ZamokC1Ev>
	Led rgb;
  aa:	ce 01       	movw	r24, r28
  ac:	02 96       	adiw	r24, 0x02	; 2
  ae:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN3LedC1Ev>
	
	//zopnutie tranzistoru na snimaci
	sbi(DDRC, SNIMAC);
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	87 b9       	out	0x07, r24	; 7
	sbi(DDRD,R_LED);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	8a b9       	out	0x0a, r24	; 10
	sbi(DDRD,B_LED);
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	8a b9       	out	0x0a, r24	; 10
	sbi(DDRD,G_LED);
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8a b9       	out	0x0a, r24	; 10
	sbi(DDRD, ZAMOK);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8a b9       	out	0x0a, r24	; 10
	cbi(PORTC,SNIMAC);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	92 e1       	ldi	r25, 0x12	; 18
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x46>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x50>
  e6:	00 00       	nop
	_delay_ms(500);
 
	DY50 snimac;
  e8:	ce 01       	movw	r24, r28
  ea:	03 96       	adiw	r24, 0x03	; 3
  ec:	0e 94 31 01 	call	0x262	; 0x262 <_ZN4DY50C1Ev>
  f0:	2f e7       	ldi	r18, 0x7F	; 127
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	92 e1       	ldi	r25, 0x12	; 18
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x60>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x6a>
 100:	00 00       	nop
	
	
	while(true){
		_delay_ms(500);
		rgb.set(0,0,0);
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	ce 01       	movw	r24, r28
 10a:	02 96       	adiw	r24, 0x02	; 2
 10c:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
		int s1 = snimac.nacitaj();	
 110:	ce 01       	movw	r24, r28
 112:	03 96       	adiw	r24, 0x03	; 3
 114:	0e 94 34 01 	call	0x268	; 0x268 <_ZN4DY507nacitajEv>
		if (s1 == 0x00)
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	09 f0       	breq	.+2      	; 0x11e <main+0x88>
 11c:	7e c0       	rjmp	.+252    	; 0x21a <main+0x184>
		{
			//fingerprint detected - green
			//rgb.set(1,1,0);
			//_delay_ms(500);
					
					int s4 = snimac.Image2Tz();
 11e:	ce 01       	movw	r24, r28
 120:	03 96       	adiw	r24, 0x03	; 3
 122:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN4DY508Image2TzEv>
 126:	8c 01       	movw	r16, r24
					if (s4 == 0x00)
 128:	89 2b       	or	r24, r25
 12a:	61 f5       	brne	.+88     	; 0x184 <main+0xee>
					{
						//generate character file complete
						int s5 = snimac.fastSearch();
 12c:	ce 01       	movw	r24, r28
 12e:	03 96       	adiw	r24, 0x03	; 3
 130:	0e 94 02 02 	call	0x404	; 0x404 <_ZN4DY5010fastSearchEv>
						if (s5 == 0x00)
 134:	89 2b       	or	r24, r25
 136:	a9 f4       	brne	.+42     	; 0x162 <main+0xcc>
						{
							//naslo match 
							rgb.set(0,1,0);
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	ce 01       	movw	r24, r28
 140:	02 96       	adiw	r24, 0x02	; 2
 142:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 146:	2f e7       	ldi	r18, 0x7F	; 127
 148:	8f e4       	ldi	r24, 0x4F	; 79
 14a:	92 e1       	ldi	r25, 0x12	; 18
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0xb6>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xc0>
 156:	00 00       	nop
							_delay_ms(500);
							el_lock.odomkni();
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN5Zamok7odomkniEv>
 160:	c7 cf       	rjmp	.-114    	; 0xf0 <main+0x5a>
						}else{
							rgb.set(1,1,1);
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	ce 01       	movw	r24, r28
 16a:	02 96       	adiw	r24, 0x02	; 2
 16c:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 170:	2f e7       	ldi	r18, 0x7F	; 127
 172:	8f e4       	ldi	r24, 0x4F	; 79
 174:	92 e1       	ldi	r25, 0x12	; 18
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xe0>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xea>
 180:	00 00       	nop
 182:	b6 cf       	rjmp	.-148    	; 0xf0 <main+0x5a>
						}
				
			} else			 
			{
				//fail to convert data
				rgb.set(1,0,1);
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	ce 01       	movw	r24, r28
 18c:	02 96       	adiw	r24, 0x02	; 2
 18e:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 192:	2f e7       	ldi	r18, 0x7F	; 127
 194:	8f e4       	ldi	r24, 0x4F	; 79
 196:	92 e1       	ldi	r25, 0x12	; 18
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x102>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x10c>
 1a2:	00 00       	nop
				_delay_ms(500);
				if (s4 == 0x01)
 1a4:	01 30       	cpi	r16, 0x01	; 1
 1a6:	11 05       	cpc	r17, r1
 1a8:	89 f4       	brne	.+34     	; 0x1cc <main+0x136>
				{
					rgb.set(1,1,1);
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	ce 01       	movw	r24, r28
 1b2:	02 96       	adiw	r24, 0x02	; 2
 1b4:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 1b8:	2f e7       	ldi	r18, 0x7F	; 127
 1ba:	8f e4       	ldi	r24, 0x4F	; 79
 1bc:	92 e1       	ldi	r25, 0x12	; 18
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x128>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x132>
 1c8:	00 00       	nop
 1ca:	92 cf       	rjmp	.-220    	; 0xf0 <main+0x5a>
					_delay_ms(500);
				}else if (s4 == 0x06)
 1cc:	06 30       	cpi	r16, 0x06	; 6
 1ce:	11 05       	cpc	r17, r1
 1d0:	89 f4       	brne	.+34     	; 0x1f4 <main+0x15e>
				{
					rgb.set(0,1,1);
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	ce 01       	movw	r24, r28
 1da:	02 96       	adiw	r24, 0x02	; 2
 1dc:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 1e0:	2f e7       	ldi	r18, 0x7F	; 127
 1e2:	8f e4       	ldi	r24, 0x4F	; 79
 1e4:	92 e1       	ldi	r25, 0x12	; 18
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x150>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x15a>
 1f0:	00 00       	nop
 1f2:	7e cf       	rjmp	.-260    	; 0xf0 <main+0x5a>
					_delay_ms(500);
				}else if (s4 == 0x07)
 1f4:	07 30       	cpi	r16, 0x07	; 7
 1f6:	11 05       	cpc	r17, r1
 1f8:	41 f4       	brne	.+16     	; 0x20a <main+0x174>
				{
					rgb.set(0,1,0);
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	ce 01       	movw	r24, r28
 202:	02 96       	adiw	r24, 0x02	; 2
 204:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 208:	73 cf       	rjmp	.-282    	; 0xf0 <main+0x5a>
				} else{
					rgb.set(0,0,0);
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	ce 01       	movw	r24, r28
 212:	02 96       	adiw	r24, 0x02	; 2
 214:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 218:	6b cf       	rjmp	.-298    	; 0xf0 <main+0x5a>
				}
				
			}
		} else if (s1 == 0x02)
 21a:	02 97       	sbiw	r24, 0x02	; 2
 21c:	89 f4       	brne	.+34     	; 0x240 <main+0x1aa>
		{
			//fingerprint not detected - blue
			rgb.set(0,0,1);
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	ce 01       	movw	r24, r28
 226:	02 96       	adiw	r24, 0x02	; 2
 228:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 22c:	2f e7       	ldi	r18, 0x7F	; 127
 22e:	8f e4       	ldi	r24, 0x4F	; 79
 230:	92 e1       	ldi	r25, 0x12	; 18
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x19c>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x1a6>
 23c:	00 00       	nop
 23e:	58 cf       	rjmp	.-336    	; 0xf0 <main+0x5a>
			_delay_ms(500);
		}else{
			//else - red - error reading
			rgb.set(1,0,0);
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	ce 01       	movw	r24, r28
 248:	02 96       	adiw	r24, 0x02	; 2
 24a:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN3Led3setEbbb>
 24e:	2f e7       	ldi	r18, 0x7F	; 127
 250:	8f e4       	ldi	r24, 0x4F	; 79
 252:	92 e1       	ldi	r25, 0x12	; 18
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x1be>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1c8>
 25e:	00 00       	nop
 260:	47 cf       	rjmp	.-370    	; 0xf0 <main+0x5a>

00000262 <_ZN4DY50C1Ev>:
		downImageResponse[i] = u.recieveChar();
	}

	return downImageResponse[9];

}
 262:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN4UARTC1Ev>
 266:	08 95       	ret

00000268 <_ZN4DY507nacitajEv>:
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	68 97       	sbiw	r28, 0x18	; 24
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
 288:	e8 2e       	mov	r14, r24
 28a:	f9 2e       	mov	r15, r25
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	e0 e0       	ldi	r30, 0x00	; 0
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	de 01       	movw	r26, r28
 294:	11 96       	adiw	r26, 0x01	; 1
 296:	01 90       	ld	r0, Z+
 298:	0d 92       	st	X+, r0
 29a:	8a 95       	dec	r24
 29c:	e1 f7       	brne	.-8      	; 0x296 <_ZN4DY507nacitajEv+0x2e>
 29e:	fe 01       	movw	r30, r28
 2a0:	3d 96       	adiw	r30, 0x0d	; 13
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	df 01       	movw	r26, r30
 2a6:	1d 92       	st	X+, r1
 2a8:	8a 95       	dec	r24
 2aa:	e9 f7       	brne	.-6      	; 0x2a6 <_ZN4DY507nacitajEv+0x3e>
 2ac:	00 e0       	ldi	r16, 0x00	; 0
 2ae:	10 e0       	ldi	r17, 0x00	; 0
 2b0:	0c 30       	cpi	r16, 0x0C	; 12
 2b2:	11 05       	cpc	r17, r1
 2b4:	74 f4       	brge	.+28     	; 0x2d2 <_ZN4DY507nacitajEv+0x6a>
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ec 0f       	add	r30, r28
 2bc:	fd 1f       	adc	r31, r29
 2be:	e0 0f       	add	r30, r16
 2c0:	f1 1f       	adc	r31, r17
 2c2:	60 81       	ld	r22, Z
 2c4:	8e 2d       	mov	r24, r14
 2c6:	9f 2d       	mov	r25, r15
 2c8:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN4UART8sendCharEh>
 2cc:	0f 5f       	subi	r16, 0xFF	; 255
 2ce:	1f 4f       	sbci	r17, 0xFF	; 255
 2d0:	ef cf       	rjmp	.-34     	; 0x2b0 <_ZN4DY507nacitajEv+0x48>
 2d2:	de 2c       	mov	r13, r14
 2d4:	cf 2c       	mov	r12, r15
 2d6:	8e 2d       	mov	r24, r14
 2d8:	9f 2d       	mov	r25, r15
 2da:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4UART11recieveCharEv>
 2de:	8f 3e       	cpi	r24, 0xEF	; 239
 2e0:	c1 f7       	brne	.-16     	; 0x2d2 <_ZN4DY507nacitajEv+0x6a>
 2e2:	8d 87       	std	Y+13, r24	; 0x0d
 2e4:	01 e0       	ldi	r16, 0x01	; 1
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	0c 30       	cpi	r16, 0x0C	; 12
 2ea:	11 05       	cpc	r17, r1
 2ec:	74 f4       	brge	.+28     	; 0x30a <_ZN4DY507nacitajEv+0xa2>
 2ee:	8d 2d       	mov	r24, r13
 2f0:	9c 2d       	mov	r25, r12
 2f2:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4UART11recieveCharEv>
 2f6:	ed e0       	ldi	r30, 0x0D	; 13
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ec 0f       	add	r30, r28
 2fc:	fd 1f       	adc	r31, r29
 2fe:	e0 0f       	add	r30, r16
 300:	f1 1f       	adc	r31, r17
 302:	80 83       	st	Z, r24
 304:	0f 5f       	subi	r16, 0xFF	; 255
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	ef cf       	rjmp	.-34     	; 0x2e8 <_ZN4DY507nacitajEv+0x80>
 30a:	8e 89       	ldd	r24, Y+22	; 0x16
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	68 96       	adiw	r28, 0x18	; 24
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	08 95       	ret

0000032c <_ZN4DY508Image2TzEv>:

int DY50::Image2Tz()
{
 32c:	cf 92       	push	r12
 32e:	df 92       	push	r13
 330:	ef 92       	push	r14
 332:	ff 92       	push	r15
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	67 97       	sbiw	r28, 0x17	; 23
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	c8 2e       	mov	r12, r24
 34e:	d9 2e       	mov	r13, r25
	uint16_t checksum;
	
	uint8_t image2TzMessage[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,0x00, 0x04, 0x02, 0x01};// charbuffer1 = 0x01
 350:	8b e0       	ldi	r24, 0x0B	; 11
 352:	e4 e2       	ldi	r30, 0x24	; 36
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	de 01       	movw	r26, r28
 358:	11 96       	adiw	r26, 0x01	; 1
 35a:	01 90       	ld	r0, Z+
 35c:	0d 92       	st	X+, r0
 35e:	8a 95       	dec	r24
 360:	e1 f7       	brne	.-8      	; 0x35a <_ZN4DY508Image2TzEv+0x2e>
	uint8_t image2TzResponse[12];
	memset(image2TzResponse,0,12);
 362:	fe 01       	movw	r30, r28
 364:	3c 96       	adiw	r30, 0x0c	; 12
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	df 01       	movw	r26, r30
 36a:	1d 92       	st	X+, r1
 36c:	8a 95       	dec	r24
 36e:	e9 f7       	brne	.-6      	; 0x36a <_ZN4DY508Image2TzEv+0x3e>
	checksum = image2TzMessage[6] + image2TzMessage[7]+ image2TzMessage [8] +  image2TzMessage[9]+ image2TzMessage[10];
	for (int j =0 ; j< 11; j++)
 370:	00 e0       	ldi	r16, 0x00	; 0
 372:	10 e0       	ldi	r17, 0x00	; 0
 374:	0b 30       	cpi	r16, 0x0B	; 11
 376:	11 05       	cpc	r17, r1
 378:	74 f4       	brge	.+28     	; 0x396 <_ZN4DY508Image2TzEv+0x6a>
	{
		u.sendChar(image2TzMessage[j]);
 37a:	e1 e0       	ldi	r30, 0x01	; 1
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ec 0f       	add	r30, r28
 380:	fd 1f       	adc	r31, r29
 382:	e0 0f       	add	r30, r16
 384:	f1 1f       	adc	r31, r17
 386:	60 81       	ld	r22, Z
 388:	8c 2d       	mov	r24, r12
 38a:	9d 2d       	mov	r25, r13
 38c:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN4UART8sendCharEh>
	
	uint8_t image2TzMessage[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,0x00, 0x04, 0x02, 0x01};// charbuffer1 = 0x01
	uint8_t image2TzResponse[12];
	memset(image2TzResponse,0,12);
	checksum = image2TzMessage[6] + image2TzMessage[7]+ image2TzMessage [8] +  image2TzMessage[9]+ image2TzMessage[10];
	for (int j =0 ; j< 11; j++)
 390:	0f 5f       	subi	r16, 0xFF	; 255
 392:	1f 4f       	sbci	r17, 0xFF	; 255
 394:	ef cf       	rjmp	.-34     	; 0x374 <_ZN4DY508Image2TzEv+0x48>
	{
		u.sendChar(image2TzMessage[j]);
	}
	u.sendChar(checksum << 8 );
 396:	fc 2c       	mov	r15, r12
 398:	ed 2c       	mov	r14, r13
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	8c 2d       	mov	r24, r12
 39e:	9d 2d       	mov	r25, r13
 3a0:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN4UART8sendCharEh>
	u.sendChar(checksum&0xff);
 3a4:	68 e0       	ldi	r22, 0x08	; 8
 3a6:	8c 2d       	mov	r24, r12
 3a8:	9d 2d       	mov	r25, r13
 3aa:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN4UART8sendCharEh>
	
	while(u.recieveChar() != 0xef){
 3ae:	8f 2d       	mov	r24, r15
 3b0:	9e 2d       	mov	r25, r14
 3b2:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4UART11recieveCharEv>
 3b6:	8f 3e       	cpi	r24, 0xEF	; 239
 3b8:	d1 f7       	brne	.-12     	; 0x3ae <_ZN4DY508Image2TzEv+0x82>
	}
	image2TzResponse[0] = 0xef;
 3ba:	8c 87       	std	Y+12, r24	; 0x0c
	for(int i=1; i < 12; i++){
 3bc:	01 e0       	ldi	r16, 0x01	; 1
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	0c 30       	cpi	r16, 0x0C	; 12
 3c2:	11 05       	cpc	r17, r1
 3c4:	74 f4       	brge	.+28     	; 0x3e2 <_ZN4DY508Image2TzEv+0xb6>
		image2TzResponse[i] = u.recieveChar();
 3c6:	8f 2d       	mov	r24, r15
 3c8:	9e 2d       	mov	r25, r14
 3ca:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4UART11recieveCharEv>
 3ce:	ec e0       	ldi	r30, 0x0C	; 12
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	ec 0f       	add	r30, r28
 3d4:	fd 1f       	adc	r31, r29
 3d6:	e0 0f       	add	r30, r16
 3d8:	f1 1f       	adc	r31, r17
 3da:	80 83       	st	Z, r24
	u.sendChar(checksum&0xff);
	
	while(u.recieveChar() != 0xef){
	}
	image2TzResponse[0] = 0xef;
	for(int i=1; i < 12; i++){
 3dc:	0f 5f       	subi	r16, 0xFF	; 255
 3de:	1f 4f       	sbci	r17, 0xFF	; 255
 3e0:	ef cf       	rjmp	.-34     	; 0x3c0 <_ZN4DY508Image2TzEv+0x94>
		image2TzResponse[i] = u.recieveChar();
	}
return image2TzResponse[9];	
 3e2:	8d 89       	ldd	r24, Y+21	; 0x15
}
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	67 96       	adiw	r28, 0x17	; 23
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	df 90       	pop	r13
 400:	cf 90       	pop	r12
 402:	08 95       	ret

00000404 <_ZN4DY5010fastSearchEv>:
return image2TzResponse[9];
}
*/

int DY50::fastSearch()
{
 404:	cf 92       	push	r12
 406:	df 92       	push	r13
 408:	ef 92       	push	r14
 40a:	ff 92       	push	r15
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	6f 97       	sbiw	r28, 0x1f	; 31
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	c8 2e       	mov	r12, r24
 426:	d9 2e       	mov	r13, r25
	uint16_t packagelength; 
	uint16_t checksum;
	//0x1b - fingerprint_hispeedsearch 
	packagelength =	8;
	//comand packets + data packets + checksum(2B)
	uint8_t paket[] = {0xef,0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, packagelength << 8, packagelength&0xff, 0x1b, 0x01, 0x00, 0x00,0x00,0xA3 }; 
 428:	fe 01       	movw	r30, r28
 42a:	31 96       	adiw	r30, 0x01	; 1
 42c:	8f e0       	ldi	r24, 0x0F	; 15
 42e:	df 01       	movw	r26, r30
 430:	1d 92       	st	X+, r1
 432:	8a 95       	dec	r24
 434:	e9 f7       	brne	.-6      	; 0x430 <_ZN4DY5010fastSearchEv+0x2c>
 436:	8f ee       	ldi	r24, 0xEF	; 239
 438:	89 83       	std	Y+1, r24	; 0x01
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	9a 83       	std	Y+2, r25	; 0x02
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	8b 83       	std	Y+3, r24	; 0x03
 442:	8c 83       	std	Y+4, r24	; 0x04
 444:	8d 83       	std	Y+5, r24	; 0x05
 446:	8e 83       	std	Y+6, r24	; 0x06
 448:	9f 83       	std	Y+7, r25	; 0x07
 44a:	8b e1       	ldi	r24, 0x1B	; 27
 44c:	8a 87       	std	Y+10, r24	; 0x0a
 44e:	9b 87       	std	Y+11, r25	; 0x0b
 450:	83 ea       	ldi	r24, 0xA3	; 163
 452:	8f 87       	std	Y+15, r24	; 0x0f
 454:	88 e0       	ldi	r24, 0x08	; 8
 456:	89 87       	std	Y+9, r24	; 0x09
		//instruction code - 0x1b, 0x01, 0x00, 0x00,0x00,0xA3
		//package identifier for search - 0x01
	checksum = paket[6] + paket[7]+ paket[8] +paket[9]+paket[10]+paket[11] +paket[12]+paket[13]+paket[14];
		// sum of package identifier, package length + package contens
	uint8_t respond[16]; 
	for (int j =0 ; j< 15; j++)
 458:	00 e0       	ldi	r16, 0x00	; 0
 45a:	10 e0       	ldi	r17, 0x00	; 0
 45c:	0f 30       	cpi	r16, 0x0F	; 15
 45e:	11 05       	cpc	r17, r1
 460:	74 f4       	brge	.+28     	; 0x47e <_ZN4DY5010fastSearchEv+0x7a>
	{
		u.sendChar(paket[j]);
 462:	e1 e0       	ldi	r30, 0x01	; 1
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ec 0f       	add	r30, r28
 468:	fd 1f       	adc	r31, r29
 46a:	e0 0f       	add	r30, r16
 46c:	f1 1f       	adc	r31, r17
 46e:	60 81       	ld	r22, Z
 470:	8c 2d       	mov	r24, r12
 472:	9d 2d       	mov	r25, r13
 474:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN4UART8sendCharEh>
		//instruction code - 0x1b, 0x01, 0x00, 0x00,0x00,0xA3
		//package identifier for search - 0x01
	checksum = paket[6] + paket[7]+ paket[8] +paket[9]+paket[10]+paket[11] +paket[12]+paket[13]+paket[14];
		// sum of package identifier, package length + package contens
	uint8_t respond[16]; 
	for (int j =0 ; j< 15; j++)
 478:	0f 5f       	subi	r16, 0xFF	; 255
 47a:	1f 4f       	sbci	r17, 0xFF	; 255
 47c:	ef cf       	rjmp	.-34     	; 0x45c <_ZN4DY5010fastSearchEv+0x58>
	{
		u.sendChar(paket[j]);
	}
	u.sendChar(checksum << 8);
 47e:	fc 2c       	mov	r15, r12
 480:	ed 2c       	mov	r14, r13
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	8c 2d       	mov	r24, r12
 486:	9d 2d       	mov	r25, r13
 488:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN4UART8sendCharEh>
	u.sendChar(checksum&0xff );
 48c:	68 ec       	ldi	r22, 0xC8	; 200
 48e:	8c 2d       	mov	r24, r12
 490:	9d 2d       	mov	r25, r13
 492:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN4UART8sendCharEh>

	while(u.recieveChar() != 0xef){
 496:	8f 2d       	mov	r24, r15
 498:	9e 2d       	mov	r25, r14
 49a:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4UART11recieveCharEv>
 49e:	8f 3e       	cpi	r24, 0xEF	; 239
 4a0:	d1 f7       	brne	.-12     	; 0x496 <_ZN4DY5010fastSearchEv+0x92>
 4a2:	01 e0       	ldi	r16, 0x01	; 1
 4a4:	10 e0       	ldi	r17, 0x00	; 0
	}
	respond[0] = 0xef;
	for(int i=1; i < 16; i++){
 4a6:	00 31       	cpi	r16, 0x10	; 16
 4a8:	11 05       	cpc	r17, r1
 4aa:	74 f4       	brge	.+28     	; 0x4c8 <_ZN4DY5010fastSearchEv+0xc4>
		respond[i] = u.recieveChar();
 4ac:	8f 2d       	mov	r24, r15
 4ae:	9e 2d       	mov	r25, r14
 4b0:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4UART11recieveCharEv>
 4b4:	e0 e1       	ldi	r30, 0x10	; 16
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	ec 0f       	add	r30, r28
 4ba:	fd 1f       	adc	r31, r29
 4bc:	e0 0f       	add	r30, r16
 4be:	f1 1f       	adc	r31, r17
 4c0:	80 83       	st	Z, r24
	u.sendChar(checksum&0xff );

	while(u.recieveChar() != 0xef){
	}
	respond[0] = 0xef;
	for(int i=1; i < 16; i++){
 4c2:	0f 5f       	subi	r16, 0xFF	; 255
 4c4:	1f 4f       	sbci	r17, 0xFF	; 255
 4c6:	ef cf       	rjmp	.-34     	; 0x4a6 <_ZN4DY5010fastSearchEv+0xa2>
		respond[i] = u.recieveChar();
	}
	
	//na 9 confirmation
	return respond[9];
 4c8:	89 8d       	ldd	r24, Y+25	; 0x19

}
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	6f 96       	adiw	r28, 0x1f	; 31
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	0f 91       	pop	r16
 4e0:	ff 90       	pop	r15
 4e2:	ef 90       	pop	r14
 4e4:	df 90       	pop	r13
 4e6:	cf 90       	pop	r12
 4e8:	08 95       	ret

000004ea <_ZN3LedC1Ev>:
Led::Led()
{

}

Led::~Led()
 4ea:	08 95       	ret

000004ec <_ZN3Led3setEbbb>:

}

void Led::set(bool r, bool g, bool b)
{
	if(r) sbi(PORTD,R_LED); else cbi(PORTD,R_LED);
 4ec:	66 23       	and	r22, r22
 4ee:	21 f0       	breq	.+8      	; 0x4f8 <_ZN3Led3setEbbb+0xc>
 4f0:	8b b1       	in	r24, 0x0b	; 11
 4f2:	80 62       	ori	r24, 0x20	; 32
 4f4:	8b b9       	out	0x0b, r24	; 11
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <_ZN3Led3setEbbb+0x12>
 4f8:	8b b1       	in	r24, 0x0b	; 11
 4fa:	8f 7d       	andi	r24, 0xDF	; 223
 4fc:	8b b9       	out	0x0b, r24	; 11
	if(g) sbi(PORTD,G_LED); else cbi(PORTD,G_LED);
 4fe:	44 23       	and	r20, r20
 500:	21 f0       	breq	.+8      	; 0x50a <_ZN3Led3setEbbb+0x1e>
 502:	8b b1       	in	r24, 0x0b	; 11
 504:	80 64       	ori	r24, 0x40	; 64
 506:	8b b9       	out	0x0b, r24	; 11
 508:	03 c0       	rjmp	.+6      	; 0x510 <_ZN3Led3setEbbb+0x24>
 50a:	8b b1       	in	r24, 0x0b	; 11
 50c:	8f 7b       	andi	r24, 0xBF	; 191
 50e:	8b b9       	out	0x0b, r24	; 11
	if(b) sbi(PORTD,B_LED); else cbi(PORTD,B_LED);
 510:	22 23       	and	r18, r18
 512:	21 f0       	breq	.+8      	; 0x51c <_ZN3Led3setEbbb+0x30>
 514:	8b b1       	in	r24, 0x0b	; 11
 516:	80 61       	ori	r24, 0x10	; 16
 518:	8b b9       	out	0x0b, r24	; 11
 51a:	08 95       	ret
 51c:	8b b1       	in	r24, 0x0b	; 11
 51e:	8f 7e       	andi	r24, 0xEF	; 239
 520:	8b b9       	out	0x0b, r24	; 11
 522:	08 95       	ret

00000524 <_ZN4UART4initEv>:
UART::~UART(){
	PRR |= (1<<PRUSART0);
} //~UART
void UART::init(void)
{
	DDRD |=(1<<PORTD1);					// Tx output
 524:	8a b1       	in	r24, 0x0a	; 10
 526:	82 60       	ori	r24, 0x02	; 2
 528:	8a b9       	out	0x0a, r24	; 10
	DDRD &=~(1<<PORTD0);				// Rx input
 52a:	8a b1       	in	r24, 0x0a	; 10
 52c:	8e 7f       	andi	r24, 0xFE	; 254
 52e:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);	// BAUDERATE
 530:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
 534:	89 e1       	ldi	r24, 0x19	; 25
 536:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);  //8 bits, parit non, 1 stop
 53a:	e2 ec       	ldi	r30, 0xC2	; 194
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	86 60       	ori	r24, 0x06	; 6
 542:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);	// enable rx a tx
 544:	e1 ec       	ldi	r30, 0xC1	; 193
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	88 61       	ori	r24, 0x18	; 24
 54c:	80 83       	st	Z, r24
	UCSR0A |= (1<<U2X0);
 54e:	e0 ec       	ldi	r30, 0xC0	; 192
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	82 60       	ori	r24, 0x02	; 2
 556:	80 83       	st	Z, r24
 558:	08 95       	ret

0000055a <_ZN4UARTC1Ev>:

#include "../Headers_/UART.h"

// default constructor
UART::UART(){
	PRR &= ~(1<<PRUSART0);
 55a:	e4 e6       	ldi	r30, 0x64	; 100
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	20 81       	ld	r18, Z
 560:	2d 7f       	andi	r18, 0xFD	; 253
 562:	20 83       	st	Z, r18
	this->init();
 564:	0e 94 92 02 	call	0x524	; 0x524 <_ZN4UART4initEv>
 568:	08 95       	ret

0000056a <_ZN4UART8sendCharEh>:
	UCSR0A |= (1<<U2X0);
};

void UART::sendChar(uint8_t x)
{
	while(!(UCSR0A& (1<<UDRE0))){};    // caka na uvolnenie UDR
 56a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 56e:	85 ff       	sbrs	r24, 5
 570:	fc cf       	rjmp	.-8      	; 0x56a <_ZN4UART8sendCharEh>
	UDR0 = x;
 572:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 576:	08 95       	ret

00000578 <_ZN4UART11recieveCharEv>:
};

uint8_t UART::recieveChar(void)
{
	while(!(UCSR0A& (1<<RXC0))){};  //return '0';  // pozor uprava: necaka na prijem
 578:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 57c:	88 23       	and	r24, r24
 57e:	e4 f7       	brge	.-8      	; 0x578 <_ZN4UART11recieveCharEv>
	return UDR0;
 580:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
};
 584:	08 95       	ret

00000586 <_ZN5ZamokC1Ev>:
Zamok::Zamok()
{

}

Zamok::~Zamok()
 586:	08 95       	ret

00000588 <_ZN5Zamok7odomkniEv>:

}

void Zamok::odomkni()
{
	sbi(PORTD,ZAMOK); //odomknut
 588:	8b b1       	in	r24, 0x0b	; 11
 58a:	88 60       	ori	r24, 0x08	; 8
 58c:	8b b9       	out	0x0b, r24	; 11
 58e:	2f ef       	ldi	r18, 0xFF	; 255
 590:	8c ed       	ldi	r24, 0xDC	; 220
 592:	9d e6       	ldi	r25, 0x6D	; 109
 594:	21 50       	subi	r18, 0x01	; 1
 596:	80 40       	sbci	r24, 0x00	; 0
 598:	90 40       	sbci	r25, 0x00	; 0
 59a:	e1 f7       	brne	.-8      	; 0x594 <_ZN5Zamok7odomkniEv+0xc>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <_ZN5Zamok7odomkniEv+0x16>
 59e:	00 00       	nop
	_delay_ms(3000); //ostane odomknuty 3 sekundy a znovu sa zamkne
	cbi(PORTD,ZAMOK); //zamknut
 5a0:	8b b1       	in	r24, 0x0b	; 11
 5a2:	87 7f       	andi	r24, 0xF7	; 247
 5a4:	8b b9       	out	0x0b, r24	; 11
 5a6:	08 95       	ret

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
